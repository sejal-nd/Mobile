// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DecibelCore
import AVFoundation
import CommonCrypto
import CoreData
import Foundation
import MapKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
@objc public enum SDKMaskView : Swift.Int {
  case automatic
  case mask
  case unmask
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class SDKMultiPlatform : ObjectiveC.NSObject {
  public init(type: DecibelCore.SDKPlatformType, version: Swift.String, language: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum SDKRecordingMode : Swift.Int {
  case defineScreensToRecord
  case defineScreensToStopRecord
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SDKLogLevel : Swift.Int {
  case none
  case info
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SDKSessionReplayType : Swift.Int {
  case hiFi
  case loFi
  case automatic
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol DecibelDelegate : AnyObject {
  @objc func getSessionURL(_ sessionUrl: Swift.String)
}
extension NSManagedObject {
  open class func first(on context: CoreData.NSManagedObjectContext?, with fetchRequest: CoreData.NSFetchRequest<CoreData.NSManagedObject>?) -> CoreData.NSManagedObject?
  open class func last(on context: CoreData.NSManagedObjectContext?, with fetchRequest: CoreData.NSFetchRequest<CoreData.NSManagedObject>?) -> CoreData.NSManagedObject?
  open class func allObjects(on context: CoreData.NSManagedObjectContext?, with fetchRequest: CoreData.NSFetchRequest<CoreData.NSManagedObject>?) -> [CoreData.NSManagedObject]
  open func delete(on context: CoreData.NSManagedObjectContext)
}
@available(iOS 13, *)
extension View {
  public func diMaskView() -> some SwiftUI.View
  
}
@available(iOS 13, *)
extension View {
  public func diSetScreenName(_ name: Swift.String) -> some SwiftUI.View
  
}
extension UIViewController {
  @objc dynamic public var diScreenName: Swift.String? {
    @objc get
    @objc set
  }
}
@objc public enum DecibelUserConsent : Swift.Int {
  case all
  case recordingAndTracking
  case tracking
  case form
  case none
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum SDKPlatformType : Swift.Int {
  case flutter
  case xamarin
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SDKRecordingScreen : Swift.Int {
  case record
  case noRecord
  case undefined
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol DecibelProtocol : AnyObject {
  @objc var delegate: DecibelCore.DecibelDelegate? { get set }
  @objc func initialize(account: Swift.String, property: Swift.String)
  @objc func initialize(account: Swift.String, property: Swift.String, consents: [Swift.Int])
  @objc func set(screen: Swift.String)
  @objc func setMaskingForCurrentScreen(mask: DecibelCore.SDKMaskAutomatic)
  @objc func send(goal: Swift.String, with value: Swift.Float, currency: DecibelCore.DecibelCurrency)
  @objc func send(goal: Swift.String, with value: Swift.Float)
  @objc func send(goal: Swift.String)
  @objc func send(dimension: Swift.String, withString value: Swift.String)
  @objc func send(dimension: Swift.String, withBool value: Swift.Bool)
  @objc func send(dimension: Swift.String, withNumber value: Swift.Double)
  @objc func enabledSessionReplay(_ enabled: Swift.Bool)
  @objc func setAutomaticMask(_ configuration: DecibelCore.SDKMaskAutomatic)
  @objc func mask(rect area: CoreGraphics.CGRect)
  @objc func setEnableConsents(_ consents: [Swift.Int])
  @objc func setDisableConsents(_ consents: [Swift.Int])
  @objc func setLogLevel(_ level: DecibelCore.SDKLogLevel)
  @objc func formSuccess()
  @objc func formError(error: Swift.String, selector: UIKit.UIView?)
  @objc func enableSessionForExperience(_ enabled: Swift.Bool)
  @objc func enableSessionForAnalysis(_ enabled: Swift.Bool)
  @objc func enableSessionForReplay(_ enabled: Swift.Bool)
  @objc func enableScreenForAnalysis(_ enabled: Swift.Bool)
  @objc func getWebViewProperties() -> Swift.String?
  @objc func sendHTTPError(statusCode: Swift.Int)
}
@_inheritsConvenienceInitializers @objc public class DecibelSDK : ObjectiveC.NSObject {
  @objc public static let shared: DecibelCore.DecibelProtocol
  @objc public static let settings: DecibelCore.SDKSettings
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum DecibelCurrency : Swift.Int {
  case AED
  case AFN
  case ALL
  case AMD
  case ANG
  case AOA
  case ARS
  case AUD
  case AWG
  case AZN
  case BAM
  case BBD
  case BDT
  case BGN
  case BHD
  case BIF
  case BMD
  case BND
  case BOB
  case BOV
  case BRL
  case BSD
  case BTN
  case BWP
  case BYN
  case BZD
  case CAD
  case CDF
  case CHE
  case CHF
  case CHW
  case CLF
  case CLP
  case CNY
  case COP
  case COU
  case CRC
  case CUC
  case CUP
  case CVE
  case CZK
  case DJF
  case DKK
  case DOP
  case DZD
  case EGP
  case ERN
  case ETB
  case EUR
  case FJD
  case FKP
  case GBP
  case GEL
  case GHS
  case GIP
  case GMD
  case GNF
  case GTQ
  case GYD
  case HKD
  case HNL
  case HRK
  case HTG
  case HUF
  case IDR
  case ILS
  case INR
  case IQD
  case IRR
  case ISK
  case JMD
  case JOD
  case JPY
  case KES
  case KGS
  case KHR
  case KMF
  case KPW
  case KRW
  case KWD
  case KYD
  case KZT
  case LAK
  case LBP
  case LKR
  case LRD
  case LSL
  case LYD
  case MAD
  case MDL
  case MGA
  case MKD
  case MMK
  case MNT
  case MOP
  case MRU
  case MUR
  case MVR
  case MWK
  case MXN
  case MXV
  case MYR
  case MZN
  case NAD
  case NGN
  case NIO
  case NOK
  case NPR
  case NZD
  case OMR
  case PAB
  case PEN
  case PGK
  case PHP
  case PKR
  case PLN
  case PYG
  case QAR
  case RON
  case RSD
  case RUB
  case RWF
  case SAR
  case SBD
  case SCR
  case SDG
  case SEK
  case SGD
  case SHP
  case SLL
  case SOS
  case SRD
  case SSP
  case STN
  case SVC
  case SYP
  case SZL
  case THB
  case TJS
  case TMT
  case TND
  case TOP
  case TRY
  case TTD
  case TWD
  case TZS
  case UAH
  case UGX
  case USD
  case USN
  case UYI
  case UYU
  case UYW
  case UZS
  case VES
  case VND
  case VUV
  case WST
  case XAF
  case XAG
  case XAU
  case XCD
  case XDR
  case XOF
  case XPD
  case XPF
  case XPT
  case XSU
  case XTS
  case XUA
  case XXX
  case YER
  case ZAR
  case ZMW
  case ZWL
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SDKMaskAutomatic : Swift.Int {
  case labels
  case inputs
  case images
  case webViews
  case forms
  case all
  case noMask
  case unmaskInputs
  case unmaskWebViews
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension UIView {
  @objc dynamic public var diMasking: DecibelCore.SDKMaskView {
    @objc get
    @objc set
  }
  @objc dynamic public var diFormTrack: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var diAddScreenForRecording: DecibelCore.SDKRecordingScreen {
    @objc get
    @objc set
  }
  @objc dynamic public var diSessionReplayType: DecibelCore.SDKSessionReplayType {
    @objc get
    @objc set
  }
}
@objc public protocol SDKSettings : AnyObject {
  @objc var mobileDataEnable: Swift.Bool { get set }
  @objc var crashReporterEnable: Swift.Bool { get set }
  @objc var recordingMode: DecibelCore.SDKRecordingMode { get set }
  @objc var sessionReplayType: DecibelCore.SDKSessionReplayType { get set }
}
extension DecibelCore.SDKMaskView : Swift.Equatable {}
extension DecibelCore.SDKMaskView : Swift.Hashable {}
extension DecibelCore.SDKMaskView : Swift.RawRepresentable {}
extension DecibelCore.SDKRecordingMode : Swift.Equatable {}
extension DecibelCore.SDKRecordingMode : Swift.Hashable {}
extension DecibelCore.SDKRecordingMode : Swift.RawRepresentable {}
extension DecibelCore.SDKLogLevel : Swift.Equatable {}
extension DecibelCore.SDKLogLevel : Swift.Hashable {}
extension DecibelCore.SDKLogLevel : Swift.RawRepresentable {}
extension DecibelCore.SDKSessionReplayType : Swift.Equatable {}
extension DecibelCore.SDKSessionReplayType : Swift.Hashable {}
extension DecibelCore.SDKSessionReplayType : Swift.RawRepresentable {}
extension DecibelCore.DecibelUserConsent : Swift.Equatable {}
extension DecibelCore.DecibelUserConsent : Swift.Hashable {}
extension DecibelCore.DecibelUserConsent : Swift.RawRepresentable {}
extension DecibelCore.SDKPlatformType : Swift.Equatable {}
extension DecibelCore.SDKPlatformType : Swift.Hashable {}
extension DecibelCore.SDKPlatformType : Swift.RawRepresentable {}
extension DecibelCore.SDKRecordingScreen : Swift.Equatable {}
extension DecibelCore.SDKRecordingScreen : Swift.Hashable {}
extension DecibelCore.SDKRecordingScreen : Swift.RawRepresentable {}
extension DecibelCore.DecibelCurrency : Swift.Equatable {}
extension DecibelCore.DecibelCurrency : Swift.Hashable {}
extension DecibelCore.DecibelCurrency : Swift.RawRepresentable {}
extension DecibelCore.SDKMaskAutomatic : Swift.Equatable {}
extension DecibelCore.SDKMaskAutomatic : Swift.Hashable {}
extension DecibelCore.SDKMaskAutomatic : Swift.RawRepresentable {}
